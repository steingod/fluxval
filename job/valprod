#!/usr/bin/python
# # -*- coding: utf-8 -*-
"""

PURPOSE:
This code will validate the OSISAF product against various types of
validation data. Itb will validate both daily and hourly products.

Typical setup for validation of daily products...
./fluxval -d -c -p ssi -s 2017010100 -e 2017063023 -i ../par/stlist_daily.txt -o /lustre/storeB/users/steingod/osisaf_validation/valrep/2017p1/ssi-opval-daily-compact-2017p1.txt -m /lustre/storeB/users/steingod/radflux/ipystations-formatted4/ -r /lustre/storeB/immutable/archive/projects/metproduction/DNMI_SAFOSI/ -k


AUTHOR:
Øystein Godøy, METNO/FOU, 2018-02-05 

"""


import sys
import getopt
import dateutil.parser
import os
from subprocess import Popen

def usage():
    print sys.argv[0]+' -p <product> -t <aggregation> -s <start> -e <end> -a <archive> -r <observations> -o <outpath>'
    sys.exit(2)

#print 'Number of arguments:', len(sys.argv), 'arguments.'
#print 'Argument List:', str(sys.argv)

def main(argv):
   # Define executable to use
   fluxval = "../bin/fluxval"

   # Parse command line options
   # Potentially move to separate function...
   outpath = None 
   mystart = None
   myend = None
   product = None
   aggregation = None
   archive = None
   observations = None
   try:
       opts, args = getopt.getopt(argv,"hp:t:s:e:o:a:r:",
               ["product=","aggregation=","ofile=",
                   "mystart=","myend=","archive=","observations="])
   except getopt.GetoptError:
      usage()
   for opt, arg in opts:
      if opt == '-h':
         usage()
      elif opt in ("-o", "--ofile"):
         outpath = arg
      elif opt in ("-p", "--product"):
         product = arg
      elif opt in ("-t", "--aggregation"):
         aggregation = arg
      elif opt in ("-r", "--observations"):
         observations = arg
      elif opt in ("-a", "--archive"):
         archive = arg
      elif opt in ("-s", "--startTime"):
         mystart = arg
      elif opt in ("-e", "--endTime"):
         myend = arg

   # Consistency checks
   if (outpath is None or archive is None or product is None or
           aggregation is None or observations is None):
       usage()

   if product in ['ssi','dli']: 
       print 'Product is ', product
   else: 
       print "Invalid product request"
       sys.exit()
   if aggregation in ['daily','passage']: 
       print 'Aggregation is', aggregation
   else: 
       print "Invalid product type request"
       sys.exit()
   if os.path.isdir(archive):
       print 'Output file is "', archive
   else:
       print "Archive not found"
       sys.exit()
   print 'Start time is', mystart
   print 'End time is', myend

   # Check that output exist or create
   if not os.path.exists(outpath):
       print "Creating "+outpath
       os.makedirs(outpath)

   # Convert datetime objects
   try:
       startTime = dateutil.parser.parse(mystart)
   except ValueError:
       print "Cannot parse startTime"
       sys.exit()
   try:
       endTime = dateutil.parser.parse(myend)
   except ValueError:
       print "Cannot parse endTime"
       sys.exit()

   print startTime
   print endTime

   # Prepare commands for parallel execution
   if aggregation == "passage":
       mycmds = [
               (fluxval+" -f -p "+product+
               " -s "+startTime.strftime("%Y%m%d%H")+
               " -e "+endTime.strftime("%Y%m%d%H")+
               " -g ns -i ../par/stlist_ns_compact.txt -c "
               " -r "+archive+
               " -m "+observations+"/ipystations-formatted4 -o "
               +outpath+"/ssival_ns_compact_"
               +startTime.strftime("%Y%m%d%H%M")+"_"
               +endTime.strftime("%Y%m%d%H%M")+".txt"),
               (fluxval+" -f -p "+product+
               " -s "+startTime.strftime("%Y%m%d%H")+
               " -e "+endTime.strftime("%Y%m%d%H")+
               " -g nr -i ../par/stlist_nr_compact.txt -c "
               " -r "+archive+
               " -m "+observations+"/ipystations-formatted4 -o "
               +outpath+"/ssival_nr_compact_"
               +startTime.strftime("%Y%m%d%H%M")+"_"
               +endTime.strftime("%Y%m%d%H%M")+".txt"),
               (fluxval+" -f -p "+product+
               " -s "+startTime.strftime("%Y%m%d%H")+
               " -e "+endTime.strftime("%Y%m%d%H")+
               " -g ns -i ../par/stlist_ns.txt -b "
               " -r "+archive+
               " -m "+observations+"/bioforsk_kdvh -o "
               +outpath+"/ssival_ns_bioforsk_"
               +startTime.strftime("%Y%m%d%H%M")+"_"
               +endTime.strftime("%Y%m%d%H%M")+".txt"),
               (fluxval+" -f -p "+product+
               " -s "+startTime.strftime("%Y%m%d%H")+
               " -e "+endTime.strftime("%Y%m%d%H")+
               " -g nr -i ../par/stlist_nr.txt -b "
               " -r "+archive+
               " -m "+observations+"/bioforsk_kdvh -o "
               +outpath+"/ssival_nr_bioforsk_"
               +startTime.strftime("%Y%m%d%H%M")+"_"
               +endTime.strftime("%Y%m%d%H%M")+".txt"),
               ]
   else:
       mycmds = [
               fluxval+" -p "+product+" -t "+aggregation+" -d",
               fluxval+" -p "+product+" -t "+aggregation+" -d",
               ]
   print "\nCommands to run..."
   for cmd in mycmds:
       print cmd

   processes = [Popen(cmd, shell=True)
        for cmd in mycmds]
   # collect statuses
   exitcodes = [p.wait() for p in processes]
   
   for exitcode in exitcodes:
       print "Command returned "+str(exitcode) 

########################################################### 
# Actually run the main...
if __name__ == "__main__":
   main(sys.argv[1:])

#!/usr/bin/perl -w
# #################################################################
# COPYRIGHT:
# EUMETSAT
#
# PRODUCED BY:
# Norwegian Meteorological Institute (met.no)
# Research and Development Department
# P.O.BOX 43 - Blindern, N-0313 OSLO, NORWAY
#
# This SW was developed by met.no and the Danish Meteorological
# Institute (DMI) within the context of the Co-operation Agreement
# for the development of a pilot SAF on Ocean and Sea Ice.
# ##################################################################
# 
# NAME:
# routineval 
#
# PURPOSE:
# To perform the SAF AVHRR SSI quality control against observations on
# ground stations for each product area created by the SAF processing 
# software. 
#
# This software is normally run once daily and during night-time.
#
# NOTES:
# NA
#
# BUGS:
# NA
#
# AUTHOR:
# Øystein Godøy, DNMI/FOU, 26/03/2002
# Øystein Godøy, DNMI/FOU, 10/04/2002
# Validation of nr products added...
# Øystein Godøy, DNMI/FOU, 05/09/2002
# Added security copy of files to prevent loosing data due to core
# dumps...
# Øystein Godøy, DNMI/FOU, 26.06.2003
# Adapted structure to the one used elsewhere.
# Øystein Godøy, met.no/FOU, 02.04.2004
# Modified for use on Red Hat.
# Øystein Godøy, met.no/FOU, 16.08.2004
# Adapted for top level initiation of jobs...
# Øystein Godøy, METNO/FOU, 07.07.2011: Modified for use outside OSISAF
# software and for validation of parallel processing chains during
# development.
#
# ID: 
# $Id$
#

use warnings;
use File::Copy;
use Cwd;
#use lib "../../../../OSI_HL_AUX/OSI_HL_JOB";
#use OSIHLjob qw(:DEFAULT :AVHRR :SSI);
use strict;

# Declare variables.
my($filecopy, $item1, $item2, $item3, $lastupdated, $curtime);
my($qcf_sec,$qcf_min,$qcf_hour,$qcf_mday,$qcf_mon,$qcf_year,
    $qcf_wday,$qcf_yday,$qcf_isdst);
my($cur_sec,$cur_min,$cur_hour,$cur_mday,$cur_mon,$cur_year,
    $cur_wday,$cur_yday,$cur_isdst);
my($start_time, $end_time, $command, $status);
my $verbose = 0; # 1 -> print everything
my $valssipass = 1;
my $valssidaily = 0;
my $valdlipass = 0;
my $valdlidaily = 0;
my $curwdir = getcwd;

# Data paths and executables etc
#read_paths "../../../../",$verbose;
my $obsdir = "/fou/sat/steingod/radflux/bioforsk";
my $destdirssi = "/fou/sat/steingod/osisaf_validation/radflux/ssi";
my $destdirdli = "/fou/sat/steingod/osisaf_validation/radflux/dli";
my $binapp = $curwdir."/../bin/fluxval";

my $qc_cfg_bio_ns = "../par/stlist_ns.txt";
my $qc_cfg_bio_nr = "../par/stlist_nr.txt";
my $qc_cfg_bio_daily = "../par/stlist_daily.txt";

my %procchains = (
    OP => {
	ssins => {
	    product => "ssi",
	    area => "ns",
	    srcdir => "/opdata/osisaf/output/flux/ssi/product/",
	    parlst => "$curwdir/../par/stlist_ns.txt",
	    valres => "$destdirssi/ssival_op_ns.txt",
	},
	ssinr => {
	    product => "ssi",
	    area => "nr",
	    srcdir => "/opdata/osisaf/output/flux/ssi/product/",
	    parlst => "$curwdir/../par/stlist_nr.txt",
	    valres => "$destdirssi/ssival_op_nr.txt",
	},
	ssidaily => {
	    product => "ssi",
	    area => "daily",
	    srcdir => "/opdata/osisaf/output/flux/ssi/daily/",
	    parlst => "$curwdir/../par/stlist_nr.txt",
	    valres => "$destdirssi/ssival_op_daily.txt",
	},
    },
    PREOP => {
	ssins => {
	    product => "ssi",
	    area => "ns",
	    srcdir => "/fou/sat/osisaf_data/output/flux/ssi/product/",
	    parlst => "$curwdir/../par/stlist_ns.txt",
	    valres => "$destdirssi/ssival_preop_ns.txt",
	},
	ssinr => {
	    product => "ssi",
	    area => "nr",
	    srcdir => "/fou/sat/osisaf_data/output/flux/ssi/product/",
	    parlst => "$curwdir/../par/stlist_nr.txt",
	    valres => "$destdirssi/ssival_preop_nr.txt",
	},
	ssidaily => {
	    product => "ssi",
	    area => "daily",
	    srcdir => "/fou/sat/osisaf_data/output/flux/ssi/daily/",
	    parlst => "$curwdir/../par/stlist_nr.txt",
	    valres => "$destdirssi/ssival_preop_daily.txt",
	},
    },
    TEST => {
	ssins => {
	    product => "ssi",
	    area => "ns",
	    srcdir => "/fou/sat/steingod/osisaf_data/output/flux/ssi/product/",
	    parlst => "$curwdir/../par/stlist_ns.txt",
	    valres => "$destdirssi/ssival_test_ns.txt",
	},
	ssinr => {
	    product => "ssi",
	    area => "nr",
	    srcdir => "/fou/sat/steingod/osisaf_data/output/flux/ssi/product/",
	    parlst => "$curwdir/../par/stlist_nr.txt",
	    valres => "$destdirssi/ssival_test_nr.txt",
	},
	ssidaily => {
	    product => "ssi",
	    area => "daily",
	    srcdir => "/fou/sat/steingod/osisaf_data/output/flux/ssi/daily/",
	    parlst => "$curwdir/../par/stlist_nr.txt",
	    valres => "$destdirssi/ssival_test_daily.txt",
	},
    },
);

my $ssilogfile = $destdirssi."/log_ssi_qc.txt";
my $ssierrfile = $destdirssi."/error_ssi_qc.txt";
my $runfile = $destdirssi."/fluxval_is_running";

open RUNF,">$runfile" || die "Unable to open $runfile\n";
print RUNF "NOW RUNNING Radiative flux validation\n\n";

# Loop through the hash containing processing chains and products
foreach $item1 (sort keys %procchains) {
    print RUNF "Now handling $item1 processing chain\n";
    foreach $item2 (sort keys %{$procchains{$item1}}) {
	print "Now handling $item2 products\n";
	# Check the last update of this validation sequence
	($qcf_sec,$qcf_min,$qcf_hour,$qcf_mday,$qcf_mon,$qcf_year,
    $qcf_wday,$qcf_yday,$qcf_isdst) = stat($procchains{$item1}{$item2}{valres});
	$qcf_mtime = 0 unless defined $qcf_mtime;
	($cur_sec,$cur_min,$cur_hour,$cur_mday,$cur_mon,$cur_year,
	 $cur_wday,$cur_yday,$cur_isdst)= gmtime(time);
	# Create a daily copy of the validation data (rolling archive over
	# a week)
	$filecopy = "$procchains{$item1}{$item2}{valres}"."-"."$cur_wday";
	copy($procchains{$item1}{$item2}{valres},$filecopy);
	# Define time period
	$start_time = sprintf "%4d%02d%02d%02d",
	    ($qcf_year+1900),($qcf_mon+1),$qcf_mday,$qcf_hour;
	$end_time = sprintf "%4d%02d%02d%02d",
	    ($cur_year+1900),($cur_mon+1),$cur_mday,$cur_hour;
	# Do the validation
	if ($procchains{$item1}{$item2}{area} eq "daily") {
	    $command = "$binapp -s $start_time -e $end_time ".
		"-m $obsdir ".
		"-p $procchains{$item1}{$item2}{product} ".
		"-i $procchains{$item1}{$item2}{parlst} ".
		"-o $procchains{$item1}{$item2}{valres} ".
		"-d";
	} else {
	    $command = "$binapp -s $start_time -e $end_time ".
		"-m $obsdir ".
		"-p $procchains{$item1}{$item2}{product} ".
		"-i $procchains{$item1}{$item2}{parlst} ".
		"-o $procchains{$item1}{$item2}{valres} ".
		"-g $procchains{$item1}{$item2}{area}";
	}
	print "$command\n" if $verbose;
	$status = system($command);
	$status /= 256;
	warn "fluxval had trouble [$status] validating $procchains{$item1}{$item2}{product} for $procchains{$item1}{$item2}{product} tiles\n" if ($status);
	
    }
}

print RUNF "Finishing...\n";
close RUNF;
unlink $runfile;

exit;
